app:
  name: song-service
  description: Song Service for metadata management
  version: 1.0.0
#  rabbitmq:
#    processor_queue: ${RABBITMQ_PROCESSOR_QUEUE}
#    exchange: ${RABBITMQ_RESOURCE_EXCHANGE}
#    routing: ${RABBITMQ_RESOURCE_ROUTING_KEY}
#    user: ${RABBITMQ_USER}
#    password: ${RABBITMQ_PASSWORD}

server:
  port: ${SONG_SERVICE_PORT}
spring:
  application:
    name: ${SONG_SERVICE_NAME}
  datasource:
    url: jdbc:postgresql://${SONG_DB_NAME}:${DB_PORT}/${SONG_DB_NAME}
    username: ${SONG_DB_USER}
    password: ${SONG_DB_PASSWORD}
    driver-class-name: org.postgresql.Driver
  rabbitmq:
    host: ${RABBITMQ_HOST}
    port: ${RABBITMQ_PORT}
    username: ${RABBITMQ_USER}
    password: ${RABBITMQ_PASSWORD}
    processor_queue: ${RABBITMQ_PROCESSOR_QUEUE}
    mp3song_queue: ${RABBITMQ_MP3SONG_QUEUE}
  jpa:
    hibernate:
      ddl-auto: update   # або: validate, create, create-drop
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect

eureka:
  client:
    serviceUrl:
      defaultZone: http://${EUREKA_SERVER_NAME}:${EUREKA_SERVER_PORT}/eureka/
    registerWithEureka: true
    fetchRegistry: true
  instance:
    instanceId:  ${SONG_SERVICE_NAME}:${random.value}
    preferIpAddress: true

management:
  endpoints:
    web:
      exposure:
        include: health,info
  endpoint:
    health:
      show-details: always
